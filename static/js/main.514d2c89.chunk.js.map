{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","aria-label","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","infor","setState","Component","CounterButton","updateCount","count","console","log","color","onClick","PureComponent","Header","components_CounterButton","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","Searchbox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.514d2c89.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) =>{\n  return(\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}/>\n      <div>\n      <h2>{name} </h2>\n      <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({\n    robots\n  }) => {\n    const cardComponent = robots.map((user, i) => {\n        return (\n          < Card\n            key = {i}\n            id = {robots[i].id}\n            name = {robots[i].name}\n            email = {robots[i].email}\n          />)\n        });\n      return ( <div > { cardComponent } </div>\n      )\n    }\n\n    export default CardList\n","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange }) => {\n  return (\n    <div>\n    <input\n    className=\"pa3 ba b--green bg-lightest-blue\"\n    type='search'\n    aria-label=\"Search Robots\"\n    placeholder='search robots'\n    onChange={searchChange}/>\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n  return <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n    {props.children}\n  </div>\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch( error, infor){\n    this.setState({hasError: true})\n  }\n\n  render(){\n    if(this.state.hasError){\n      return <h1>Ooops. That is not good</h1>\n    }\n      return this.props.children\n  }\n}\n\nexport default ErrorBoundry\n","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n  constructor(){\n    super();\n    this.state = {\n      count:0\n    }\n  }\n\n  // shouldComponentUpdate(nextProps, nextState){\n  //   if(this.state.count !== nextState.count){\n  //     return true;\n  //   }else{\n  //     return false;\n  //   }\n  // }\n\n  updateCount = () => {\n    this.setState( state => {\n      return {count: state.count + 1}});\n  }\n\n  render(){\n    console.log('CounterButton');\n    return (<button color={this.props.color} onClick={this.updateCount}>\n    Count {this.state.count}\n    </button> )\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n  // shouldComponentUpdate(nextProps, nextState){\n  //   return false;\n  // }\n  render(){\n    console.log('Header');\n    return(\n      <div>\n      <CounterButton color={'red'} />   <h1 className='f2'>RoboFriends</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n//import { robots } from '../robots';\nimport './App.css'\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return{\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange:(event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component{\n\n   componentDidMount(){\n     this.props.onRequestRobots();\n   }\n\n  render(){\n    const{ searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchField={searchField} searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n          <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js'\n\n\nexport const setSearchField = ( text ) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload:text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then( data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS } from './constants.js'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type){\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {'searchField': action.payload});\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending:false,\n  robots:[],\n  error:''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending:false});\n    default:\n        return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleWare from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger));\n\nReactDOM.render(<Provider store={store}>\n                  <App/>\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}